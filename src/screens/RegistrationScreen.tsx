import React, { useState } from "react";
import { View, Text, TextInput, Pressable, KeyboardAvoidingView, Platform, ScrollView, Alert } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Ionicons } from "@expo/vector-icons";
import { useAppStore } from "../state/appStore";
import { useNavigation } from "@react-navigation/native";

type RegistrationStep = "phone" | "sms_code" | "email" | "email_verify" | "complete";

export default function RegistrationScreen() {
  const navigation = useNavigation();
  const registerUser = useAppStore((s) => s.registerUser);

  const [step, setStep] = useState<RegistrationStep>("phone");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [smsCode, setSmsCode] = useState("");
  const [email, setEmail] = useState("");
  const [username, setUsername] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  // Mock SMS sending (in production, use real SMS service like Twilio)
  const sendSMSCode = async () => {
    setIsLoading(true);
    
    // Validate phone
    if (phoneNumber.length < 10) {
      Alert.alert("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä");
      setIsLoading(false);
      return;
    }

    try {
      // TODO: Integrate with real SMS service
      // await fetch('YOUR_SMS_SERVICE_API', {
      //   method: 'POST',
      //   body: JSON.stringify({ phone: phoneNumber })
      // });
      
      console.log(`Sending SMS code to: ${phoneNumber}`);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      Alert.alert(
        "–ö–æ–¥ –∏–∑–ø—Ä–∞—Ç–µ–Ω",
        "–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤–∞—à–∏—Ç–µ SMS —Å—ä–æ–±—â–µ–Ω–∏—è –∑–∞ 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥.\n\n[DEMO: –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∫–æ–¥ 123456]",
        [{ text: "OK", onPress: () => setStep("sms_code") }]
      );
    } catch (error) {
      Alert.alert("–ì—Ä–µ—à–∫–∞", "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º SMS –∫–æ–¥. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.");
    } finally {
      setIsLoading(false);
    }
  };

  // Verify SMS code
  const verifySMSCode = async () => {
    setIsLoading(true);

    if (smsCode.length !== 6) {
      Alert.alert("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥");
      setIsLoading(false);
      return;
    }

    try {
      // TODO: Verify with backend
      // const response = await fetch('YOUR_API/verify-sms', {
      //   method: 'POST',
      //   body: JSON.stringify({ phone: phoneNumber, code: smsCode })
      // });
      
      console.log(`Verifying SMS code: ${smsCode}`);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Demo: Accept 123456
      if (smsCode === "123456") {
        setStep("email");
      } else {
        Alert.alert("–ì—Ä–µ—à–∫–∞", "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.\n\n[DEMO: –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ 123456]");
      }
    } catch (error) {
      Alert.alert("–ì—Ä–µ—à–∫–∞", "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞–º–µ –∫–æ–¥–∞.");
    } finally {
      setIsLoading(false);
    }
  };

  // Send email verification
  const sendEmailVerification = async () => {
    setIsLoading(true);

    if (!email.includes("@")) {
      Alert.alert("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å");
      setIsLoading(false);
      return;
    }

    if (username.trim().length < 2) {
      Alert.alert("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)");
      setIsLoading(false);
      return;
    }

    try {
      // TODO: Send email verification
      // await fetch('YOUR_API/send-email-verification', {
      //   method: 'POST',
      //   body: JSON.stringify({ email, phone: phoneNumber })
      // });
      
      console.log(`Sending email verification to: ${email}`);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      Alert.alert(
        "Email –∏–∑–ø—Ä–∞—Ç–µ–Ω",
        "–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤–∞—à–∞—Ç–∞ –ø–æ—â–∞ –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –≤—ä—Ä—Ö—É –ª–∏–Ω–∫–∞ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ.\n\n[DEMO: –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ '–ó–∞–≤—ä—Ä—à–∏' –¥–∏—Ä–µ–∫—Ç–Ω–æ]",
        [{ text: "OK", onPress: () => setStep("email_verify") }]
      );
    } catch (error) {
      Alert.alert("–ì—Ä–µ—à–∫–∞", "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º –∏–º–µ–π–ª –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ.");
    } finally {
      setIsLoading(false);
    }
  };

  // Complete registration
  const completeRegistration = () => {
    registerUser(email, username);
    
    // Update phone verification status
    const user = useAppStore.getState().user;
    useAppStore.setState({
      user: {
        ...user,
        phoneNumber,
        isPhoneVerified: true,
        isEmailVerified: true,
      },
    });

    Alert.alert(
      "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!",
      "–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ –Ω–∞—à–∞—Ç–∞ –æ–±—â–Ω–æ—Å—Ç!",
      [
        {
          text: "–ó–∞–ø–æ—á–Ω–∏",
          onPress: () => (navigation as any).navigate("Main"),
        },
      ]
    );
  };

  const renderPhoneStep = () => (
    <View className="flex-1 px-6">
      <View className="items-center mb-8">
        <View className="w-20 h-20 rounded-full bg-blue-100 items-center justify-center mb-4">
          <Ionicons name="phone-portrait" size={40} color="#3b82f6" />
        </View>
        <Text className="text-2xl font-bold mb-2">–í–∞—à–∏—è—Ç —Ç–µ–ª–µ—Ñ–æ–Ω</Text>
        <Text className="text-gray-600 text-center">
          –©–µ –≤–∏ –∏–∑–ø—Ä–∞—Ç–∏–º SMS —Å 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        </Text>
      </View>

      <View className="mb-6">
        <Text className="text-sm font-semibold text-gray-700 mb-2">
          –¢–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä
        </Text>
        <View className="flex-row items-center bg-gray-100 rounded-lg px-4 py-3">
          <Text className="text-gray-600 mr-2">üáßüá¨ +359</Text>
          <TextInput
            value={phoneNumber}
            onChangeText={setPhoneNumber}
            placeholder="87 XXX XXXX"
            placeholderTextColor="#999"
            keyboardType="phone-pad"
            maxLength={15}
            className="flex-1 text-base"
          />
        </View>
        <Text className="text-xs text-gray-500 mt-2">
          –í–∞—à–∏—è—Ç –Ω–æ–º–µ—Ä –Ω—è–º–∞ –¥–∞ –±—ä–¥–µ —Å–ø–æ–¥–µ–ª—è–Ω –ø—É–±–ª–∏—á–Ω–æ
        </Text>
      </View>

      <Pressable
        onPress={sendSMSCode}
        disabled={isLoading || phoneNumber.length < 10}
        className={`py-4 rounded-lg ${
          isLoading || phoneNumber.length < 10 ? "bg-gray-300" : "bg-blue-500"
        }`}
      >
        <Text className="text-white font-bold text-center text-lg">
          {isLoading ? "–ò–∑–ø—Ä–∞—â–∞–Ω–µ..." : "–ò–∑–ø—Ä–∞—Ç–∏ SMS –∫–æ–¥"}
        </Text>
      </Pressable>
    </View>
  );

  const renderSMSCodeStep = () => (
    <View className="flex-1 px-6">
      <View className="items-center mb-8">
        <View className="w-20 h-20 rounded-full bg-green-100 items-center justify-center mb-4">
          <Ionicons name="chatbox-ellipses" size={40} color="#22c55e" />
        </View>
        <Text className="text-2xl font-bold mb-2">–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–¥–∞</Text>
        <Text className="text-gray-600 text-center">
          –ò–∑–ø—Ä–∞—Ç–∏—Ö–º–µ 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –Ω–∞ {phoneNumber}
        </Text>
      </View>

      <View className="mb-6">
        <Text className="text-sm font-semibold text-gray-700 mb-2">
          SMS –∫–æ–¥
        </Text>
        <TextInput
          value={smsCode}
          onChangeText={setSmsCode}
          placeholder="123456"
          placeholderTextColor="#999"
          keyboardType="number-pad"
          maxLength={6}
          className="bg-gray-100 rounded-lg px-4 py-3 text-center text-2xl tracking-widest font-bold"
          autoFocus
        />
      </View>

      <Pressable
        onPress={verifySMSCode}
        disabled={isLoading || smsCode.length !== 6}
        className={`py-4 rounded-lg mb-3 ${
          isLoading || smsCode.length !== 6 ? "bg-gray-300" : "bg-green-500"
        }`}
      >
        <Text className="text-white font-bold text-center text-lg">
          {isLoading ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..." : "–ü–æ—Ç–≤—ä—Ä–¥–∏"}
        </Text>
      </Pressable>

      <Pressable onPress={sendSMSCode} disabled={isLoading}>
        <Text className="text-blue-500 text-center font-semibold">
          –ò–∑–ø—Ä–∞—Ç–∏ –∫–æ–¥ –æ—Ç–Ω–æ–≤–æ
        </Text>
      </Pressable>
    </View>
  );

  const renderEmailStep = () => (
    <View className="flex-1 px-6">
      <View className="items-center mb-8">
        <View className="w-20 h-20 rounded-full bg-purple-100 items-center justify-center mb-4">
          <Ionicons name="mail" size={40} color="#8b5cf6" />
        </View>
        <Text className="text-2xl font-bold mb-2">–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</Text>
        <Text className="text-gray-600 text-center">
          –ò–∑–±–µ—Ä–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –∏ –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ–π–ª
        </Text>
      </View>

      <View className="mb-4">
        <Text className="text-sm font-semibold text-gray-700 mb-2">
          –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ
        </Text>
        <TextInput
          value={username}
          onChangeText={setUsername}
          placeholder="–í–∞—à–µ—Ç–æ –∏–º–µ"
          placeholderTextColor="#999"
          maxLength={30}
          className="bg-gray-100 rounded-lg px-4 py-3 text-base"
          autoCapitalize="words"
        />
      </View>

      <View className="mb-6">
        <Text className="text-sm font-semibold text-gray-700 mb-2">
          Email –∞–¥—Ä–µ—Å
        </Text>
        <TextInput
          value={email}
          onChangeText={setEmail}
          placeholder="example@email.com"
          placeholderTextColor="#999"
          keyboardType="email-address"
          autoCapitalize="none"
          className="bg-gray-100 rounded-lg px-4 py-3 text-base"
        />
        <Text className="text-xs text-gray-500 mt-2">
          –í–∞—à–∏—è—Ç –∏–º–µ–π–ª –Ω—è–º–∞ –¥–∞ –±—ä–¥–µ —Å–ø–æ–¥–µ–ª—è–Ω –ø—É–±–ª–∏—á–Ω–æ
        </Text>
      </View>

      <Pressable
        onPress={sendEmailVerification}
        disabled={isLoading || !email.includes("@") || username.trim().length < 2}
        className={`py-4 rounded-lg ${
          isLoading || !email.includes("@") || username.trim().length < 2
            ? "bg-gray-300"
            : "bg-purple-500"
        }`}
      >
        <Text className="text-white font-bold text-center text-lg">
          {isLoading ? "–ò–∑–ø—Ä–∞—â–∞–Ω–µ..." : "–ü—Ä–æ–¥—ä–ª–∂–∏"}
        </Text>
      </Pressable>
    </View>
  );

  const renderEmailVerifyStep = () => (
    <View className="flex-1 px-6">
      <View className="items-center mb-8">
        <View className="w-20 h-20 rounded-full bg-amber-100 items-center justify-center mb-4">
          <Ionicons name="checkmark-circle" size={48} color="#f59e0b" />
        </View>
        <Text className="text-2xl font-bold mb-2">–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–º–µ–π–ª–∞</Text>
        <Text className="text-gray-600 text-center">
          –ò–∑–ø—Ä–∞—Ç–∏—Ö–º–µ –ª–∏–Ω–∫ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ {email}
        </Text>
      </View>

      <View className="bg-blue-50 rounded-lg p-4 mb-6">
        <View className="flex-row items-start">
          <Ionicons name="information-circle" size={24} color="#3b82f6" />
          <View className="flex-1 ml-3">
            <Text className="text-sm text-blue-900 leading-5">
              –ö–ª–∏–∫–Ω–µ—Ç–µ –≤—ä—Ä—Ö—É –ª–∏–Ω–∫–∞ –≤ –∏–º–µ–π–ª–∞ –∑–∞ –¥–∞ –∑–∞–≤—ä—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞. 
              –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏ SPAM –ø–∞–ø–∫–∞—Ç–∞ –∞–∫–æ –Ω–µ –≥–æ –Ω–∞–º–∏—Ä–∞—Ç–µ.
            </Text>
          </View>
        </View>
      </View>

      <Pressable
        onPress={completeRegistration}
        className="bg-amber-500 py-4 rounded-lg mb-3"
      >
        <Text className="text-white font-bold text-center text-lg">
          –ó–∞–≤—ä—Ä—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ [DEMO]
        </Text>
      </Pressable>

      <Pressable onPress={sendEmailVerification}>
        <Text className="text-blue-500 text-center font-semibold">
          –ò–∑–ø—Ä–∞—Ç–∏ –∏–º–µ–π–ª –æ—Ç–Ω–æ–≤–æ
        </Text>
      </Pressable>
    </View>
  );

  return (
    <SafeAreaView className="flex-1 bg-white" edges={["top"]}>
      {/* Header */}
      <View className="px-4 py-3 border-b border-gray-200 flex-row items-center">
        {step !== "phone" && (
          <Pressable
            onPress={() => {
              if (step === "sms_code") setStep("phone");
              else if (step === "email") setStep("sms_code");
              else if (step === "email_verify") setStep("email");
            }}
            className="mr-3"
          >
            <Ionicons name="arrow-back" size={24} color="#000" />
          </Pressable>
        )}
        <Text className="text-xl font-bold">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</Text>
        <Pressable
          onPress={() => navigation.goBack()}
          className="ml-auto"
        >
          <Ionicons name="close" size={28} color="#666" />
        </Pressable>
      </View>

      {/* Progress indicator */}
      <View className="px-4 py-4">
        <View className="flex-row items-center justify-between mb-2">
          <Text className="text-sm font-semibold text-gray-700">
            –°—Ç—ä–ø–∫–∞ {step === "phone" || step === "sms_code" ? "1" : "2"} –æ—Ç 2
          </Text>
          <Text className="text-sm text-gray-500">
            {step === "phone" && "SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"}
            {step === "sms_code" && "–ö–æ–¥ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ"}
            {step === "email" && "Email —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}
            {step === "email_verify" && "Email –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ"}
          </Text>
        </View>
        <View className="h-2 bg-gray-200 rounded-full overflow-hidden">
          <View
            className="h-full bg-blue-500 rounded-full"
            style={{
              width:
                step === "phone"
                  ? "25%"
                  : step === "sms_code"
                  ? "50%"
                  : step === "email"
                  ? "75%"
                  : "100%",
            }}
          />
        </View>
      </View>

      <KeyboardAvoidingView
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        className="flex-1"
      >
        <ScrollView className="flex-1" contentContainerClassName="flex-1">
          {step === "phone" && renderPhoneStep()}
          {step === "sms_code" && renderSMSCodeStep()}
          {step === "email" && renderEmailStep()}
          {step === "email_verify" && renderEmailVerifyStep()}
        </ScrollView>
      </KeyboardAvoidingView>

      {/* Privacy note */}
      <View className="px-6 py-4 border-t border-gray-200">
        <Text className="text-xs text-gray-500 text-center leading-4">
          üîí –ù–∏–µ —Å—ä–±–∏—Ä–∞–º–µ —Å–∞–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º–µ–π–ª –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è. 
          –¢–µ–∑–∏ –¥–∞–Ω–Ω–∏ –Ω—è–º–∞ –¥–∞ –±—ä–¥–∞—Ç —Å–ø–æ–¥–µ–ª—è–Ω–∏ –ø—É–±–ª–∏—á–Ω–æ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–∞–Ω–∏.
        </Text>
      </View>
    </SafeAreaView>
  );
}
